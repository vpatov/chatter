c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
list
p thread_list
p *thread_list
define plist
  set var $n = $arg0->head
  while $n
    printf "%d ", $n->data
    set var $n = $n->next
  end
end
(gdb) plist myList
plist *thread_list
define plist
set var $n = $arg0
while $n
printf "%d %d", $n->thread, $n->next
set var $n = $n->next
end
end
plist *thread_list
print *thread_list->thread
print *thread_list->next
print *thread_list->next->next
print *thread_list->next->next->next

print *thread_list->next->next->next->next
print *thread_list->next->next->next->next->next
print *thread_list->next->next->next->next->next->next
b pool_destroy
breakpoints
b
del 3
del 1
c
step
step
step
step
step
step
step
step
b pool_destroy
c
step
step
c
exit
quit
run
c
c
c
c
c
c
c
c
c
c
c
c
c
c
si
si
si
si
set logging on
si
si
si
s
si
c
c
c
c
quit
b pool_destroy
run
step
step
step
step
step
step
step
p node
p node->thread
step
step
step
step
step
step
step
step
step
step
step
step
step
step
c
c
c
quit
run
c
thread 6261
thread
thread 2
thread info
info thread
thread 46
backtrace
step
step
step
step
step
step
step
quit
quit
run
b 524
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
quit
run
c
quit
run
backtrace
c
backtrace
list
up
list
list
list
up
list
b 440
c
backquit
quit
b pool_destroy
run
c
quit
b pool_destroy
c
run
b pool_create
c
quit
run
info thread
make
quit
run
c
make
run
quit
run
p global_pool_head
info locals
p global_pool_head->job_head
p global_pool_head->worker_pool
p global_pool_head->pool_worker
p global_pool_head->pool_worker->worker_next
p global_pool_head->pool_worker->worker_next->worker_next
p global_pool_head->pool_worker->worker_next->worker_next->worker_next
p global_pool_head->pool_worker->worker_next->worker_next->worker_next->worker_tid
px global_pool_head->pool_worker->worker_next->worker_next->worker_next->worker_tid
x global_pool_head->pool_worker->worker_next->worker_next->worker_next->worker_tid/x
p/x global_pool_head->pool_worker->worker_next->worker_next->worker_next->worker_tid
p pthread_self()
p/x pthread_self()
info thread
quit
