


1) echo MOTD to connected clients

// TODO 5) In chat rooms, assign each different user a unique color.
// TODO 6) Set up a signal handler that takes Ctrl-C and closes sockets correctly.
// TODO 		a) Handle all possible errors, client dying, server dying, etc.
// TODO 7) If the server is started with the -e f lag then all chat that is sent to the client(s) and all messag es
//				should also be displayed on the server.



//TODO 8) Implement waiting room
			- Create chat rooms
			- List the available chat rooms
			- Join a chat room
			- Log out of the server



Questions:
1) I encountered an interesting issue where calls to printf weren't printing unless I flushed the buffer. Why is this the case? Apparently because of a newline.

Notes:

1) Client blocks on call to recv only during the login procedure.


******* REALLY NOT FULLY THOUGHT OUT - 
2) I iterated over various designs for enforcing the protocol. It went from botchy, to better, to pretty good! However, the best abstraction I could think of still lives in my head, because I don't have time to implement a new protocol enforcer... However, it would have the following structure. The possible expected flows of interactions between the server and client could be described by a tree(graph) of tuples. Each path down the tree/graph of tuples describes one possible flow (no branches). An interaction between a client and a server traverses the tree/graph, and children are chosen based upon the values/properties of the message received.
	
Each tuple would consists of:
	1) Properties of the message that we expect to receive, such as the verb, the content, the sender. The verb is required, the others are optional (conditionally).
	2) A child for each verb.
	3) ----



3) Just thought of another possible protocol enforcer. From the very get go, multiplex on read sockets, and as data comes in, react to it according to a list of global variables that represent the state. For example, if expect_auth flag is true, and the data received is not an auth, react with close. If data received was auth, turn off auth flag and set other flags appropriately. Only one flag should be set at a time, unless multiple verbs can be accepted. If so, then the associate action of the flag should be to continue iteration.
********